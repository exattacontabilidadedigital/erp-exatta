// Script para limpar matches duplicados e garantir apenas 1 match por transa√ß√£o OFX
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);

async function fixDuplicateMatches() {
  console.log('üîß INICIANDO CORRE√á√ÉO DE MATCHES DUPLICADOS...');
  
  try {
    // 1. Analisar situa√ß√£o atual
    console.log('\nüìä 1. AN√ÅLISE DA SITUA√á√ÉO ATUAL:');
    
    const { data: allMatches, error: fetchError } = await supabase
      .from('transaction_matches')
      .select('*')
      .order('created_at', { ascending: false });
    
    if (fetchError) {
      console.error('‚ùå Erro ao buscar matches:', fetchError);
      return;
    }
    
    console.log(`Total de matches encontrados: ${allMatches.length}`);
    
    // Agrupar por bank_transaction_id para identificar duplicatas
    const groupedByBank = allMatches.reduce((acc, match) => {
      const bankId = match.bank_transaction_id;
      if (!acc[bankId]) {
        acc[bankId] = [];
      }
      acc[bankId].push(match);
      return acc;
    }, {});
    
    // Identificar duplicatas
    const duplicatedBankTransactions = Object.entries(groupedByBank)
      .filter(([bankId, matches]) => matches.length > 1);
    
    console.log(`\nTransa√ß√µes banc√°rias com duplicatas: ${duplicatedBankTransactions.length}`);
    
    duplicatedBankTransactions.forEach(([bankId, matches]) => {
      console.log(`  - ${bankId}: ${matches.length} matches`);
      matches.forEach((match, idx) => {
        console.log(`    ${idx + 1}. ${match.id} (${match.status}) - ${match.created_at}`);
      });
    });
    
    // 2. Estrat√©gia de limpeza
    console.log('\nüßπ 2. ESTRAT√âGIA DE LIMPEZA:');
    console.log('Para cada transa√ß√£o banc√°ria duplicada:');
    console.log('  1. Manter o match com status "confirmed" (se existir)');
    console.log('  2. Se n√£o h√° confirmed, manter o mais recente');
    console.log('  3. Remover todos os outros matches');
    
    // 3. Executar limpeza
    console.log('\nüîÑ 3. EXECUTANDO LIMPEZA...');
    
    let totalRemoved = 0;
    
    for (const [bankId, matches] of duplicatedBankTransactions) {
      console.log(`\nProcessando transa√ß√£o ${bankId}:`);
      
      // Ordenar matches: confirmed primeiro, depois por data mais recente
      const sortedMatches = matches.sort((a, b) => {
        // Prioridade 1: status confirmed
        if (a.status === 'confirmed' && b.status !== 'confirmed') return -1;
        if (b.status === 'confirmed' && a.status !== 'confirmed') return 1;
        
        // Prioridade 2: mais recente
        return new Date(b.created_at) - new Date(a.created_at);
      });
      
      // Manter o primeiro (melhor) match
      const keepMatch = sortedMatches[0];
      const removeMatches = sortedMatches.slice(1);
      
      console.log(`  ‚úÖ Mantendo: ${keepMatch.id} (${keepMatch.status})`);
      console.log(`  üóëÔ∏è Removendo: ${removeMatches.length} matches`);
      
      // Remover matches desnecess√°rios
      for (const matchToRemove of removeMatches) {
        const { error: deleteError } = await supabase
          .from('transaction_matches')
          .delete()
          .eq('id', matchToRemove.id);
        
        if (deleteError) {
          console.error(`    ‚ùå Erro ao remover ${matchToRemove.id}:`, deleteError);
        } else {
          console.log(`    ‚úÖ Removido: ${matchToRemove.id}`);
          totalRemoved++;
        }
      }
      
      // Atualizar status da transa√ß√£o banc√°ria baseado no match mantido
      let reconciliationStatus = 'pending';
      let statusConciliacao = 'pendente';
      
      switch (keepMatch.status) {
        case 'confirmed':
          reconciliationStatus = 'conciliado';
          statusConciliacao = 'conciliado';
          break;
        case 'suggested':
          reconciliationStatus = 'sugerido';
          statusConciliacao = 'pendente';
          break;
        default:
          reconciliationStatus = 'pending';
          statusConciliacao = 'pendente';
      }
      
      const { error: updateError } = await supabase
        .from('bank_transactions')
        .update({
          reconciliation_status: reconciliationStatus,
          status_conciliacao: statusConciliacao,
          matched_lancamento_id: keepMatch.status === 'confirmed' ? keepMatch.system_transaction_id : null,
          match_confidence: keepMatch.match_score,
          updated_at: new Date().toISOString()
        })
        .eq('id', bankId);
      
      if (updateError) {
        console.error(`    ‚ö†Ô∏è Erro ao atualizar transa√ß√£o banc√°ria:`, updateError);
      } else {
        console.log(`    ‚úÖ Status atualizado: ${reconciliationStatus}`);
      }
    }
    
    // 4. Verifica√ß√£o final
    console.log('\nüìã 4. VERIFICA√á√ÉO FINAL:');
    
    const { data: finalMatches } = await supabase
      .from('transaction_matches')
      .select('bank_transaction_id')
      .order('created_at', { ascending: false });
    
    const finalGrouped = finalMatches.reduce((acc, match) => {
      const bankId = match.bank_transaction_id;
      acc[bankId] = (acc[bankId] || 0) + 1;
      return acc;
    }, {});
    
    const remainingDuplicates = Object.entries(finalGrouped)
      .filter(([bankId, count]) => count > 1);
    
    console.log(`Total de matches ap√≥s limpeza: ${finalMatches.length}`);
    console.log(`Matches √∫nicos por transa√ß√£o: ${Object.keys(finalGrouped).length}`);
    console.log(`Duplicatas restantes: ${remainingDuplicates.length}`);
    console.log(`Total de matches removidos: ${totalRemoved}`);
    
    if (remainingDuplicates.length === 0) {
      console.log('‚úÖ SUCESSO: Todas as duplicatas foram removidas!');
    } else {
      console.log('‚ö†Ô∏è ATEN√á√ÉO: Ainda existem duplicatas:');
      remainingDuplicates.forEach(([bankId, count]) => {
        console.log(`  - ${bankId}: ${count} matches`);
      });
    }
    
    // 5. Relat√≥rio final
    console.log('\nüìä 5. RELAT√ìRIO FINAL:');
    console.log(`- Transa√ß√µes banc√°rias √∫nicas: ${Object.keys(finalGrouped).length}`);
    console.log(`- Total de matches finais: ${finalMatches.length}`);
    console.log(`- Propor√ß√£o 1:1 atingida: ${Object.keys(finalGrouped).length === finalMatches.length ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
    
    // Se voc√™ tinha 14 transa√ß√µes OFX, agora deve ter no m√°ximo 14 matches
    const expectedOFXTransactions = 14;
    if (finalMatches.length <= expectedOFXTransactions) {
      console.log(`‚úÖ Resultado esperado: ${finalMatches.length} matches (‚â§ ${expectedOFXTransactions} transa√ß√µes OFX)`);
    } else {
      console.log(`‚ö†Ô∏è Ainda h√° mais matches (${finalMatches.length}) que transa√ß√µes OFX esperadas (${expectedOFXTransactions})`);
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante a corre√ß√£o:', error);
  }
}

// Executar o script
console.log('üöÄ Iniciando corre√ß√£o de matches duplicados...');
fixDuplicateMatches();

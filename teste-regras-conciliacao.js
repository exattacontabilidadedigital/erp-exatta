// TESTE PR√ÅTICO - Sistema de Sugest√µes
// Para verificar se o sistema est√° gerando sugest√µes corretamente

// Dados espec√≠ficos para gerar SUGEST√ïES
const exemploTransacoesBancarias = [
  // ‚úÖ VERDE - Match Exato (deve ser CONCILIADO)
  {
    id: "1",
    fit_id: "TXN001",
    memo: "Pagamento Fornecedor ABC Ltda",
    amount: -1500.00,
    posted_at: "2025-01-15",
    transaction_type: "DEBIT"
  },
  
  // ÔøΩ AMARELO - Sugest√£o por valor diferente (deve ser SUGERIDO)
  {
    id: "2", 
    fit_id: "TXN002",
    memo: "Compra Supermercado XYZ",
    amount: -250.50, // R$ 0,50 de diferen√ßa
    posted_at: "2025-01-16",
    transaction_type: "DEBIT"
  },
  
  // üü° AMARELO - Sugest√£o por data diferente (deve ser SUGERIDO)
  {
    id: "3",
    fit_id: "TXN003", 
    memo: "Energia El√©trica",
    amount: -180.00,
    posted_at: "2025-01-20", // 2 dias de diferen√ßa
    transaction_type: "DEBIT"
  },
  
  // ÔøΩ AMARELO - Sugest√£o por descri√ß√£o similar (deve ser SUGERIDO)
  {
    id: "4",
    fit_id: "TXN004",
    memo: "Pagto Internet Banda Larga",
    amount: -89.90,
    posted_at: "2025-01-25", 
    transaction_type: "DEBIT"
  },
  
  // ‚ö™ BRANCO - Sem Match (sem correspond√™ncia)
  {
    id: "5",
    fit_id: "TXN005",
    memo: "Taxa banc√°ria especial",
    amount: -15.00,
    posted_at: "2025-01-28", 
    transaction_type: "DEBIT"
  }
];

const exemploLancamentosSistema = [
  // Match para transa√ß√£o 1 (CONCILIADO - exato)
  {
    id: "L001",
    descricao: "Pagamento Fornecedor ABC Ltda",
    valor: -1500.00,
    data_lancamento: "2025-01-15",
    tipo: "despesa"
  },
  
  // Match para transa√ß√£o 2 (SUGERIDO - valor diferente)
  {
    id: "L002", 
    descricao: "Compra Supermercado XYZ",
    valor: -250.00, // R$ 0,50 de diferen√ßa (0.2%)
    data_lancamento: "2025-01-16",
    tipo: "despesa"
  },
  
  // Match para transa√ß√£o 3 (SUGERIDO - data diferente)
  {
    id: "L003",
    descricao: "Energia El√©trica",
    valor: -180.00,
    data_lancamento: "2025-01-18", // 2 dias de diferen√ßa
    tipo: "despesa"
  },
  
  // Match para transa√ß√£o 4 (SUGERIDO - descri√ß√£o similar)
  {
    id: "L004",
    descricao: "Internet Banda Larga",
    valor: -89.90,
    data_lancamento: "2025-01-25",
    tipo: "despesa"
  }
  
  // N√£o h√° lan√ßamento para transa√ß√£o 5 (SEM_MATCH)
];

// Simula√ß√£o dos resultados esperados para TESTE DE SUGEST√ïES
const resultadosEsperados = [
  {
    bankTransaction: exemploTransacoesBancarias[0],
    systemTransaction: exemploLancamentosSistema[0],
    status: "conciliado", // ‚úÖ VERDE - Match exato
    matchScore: 100,
    matchReason: "Valor, data e descri√ß√£o id√™nticos",
    confidenceLevel: "high"
  },
  
  {
    bankTransaction: exemploTransacoesBancarias[1], 
    systemTransaction: exemploLancamentosSistema[1],
    status: "sugerido", // ÔøΩ AMARELO - Valor ligeiramente diferente
    matchScore: 88,
    matchReason: "Data e valor semelhantes (¬±2%, ¬±3 dias)",
    confidenceLevel: "medium"
  },
  
  {
    bankTransaction: exemploTransacoesBancarias[2],
    systemTransaction: exemploLancamentosSistema[2], 
    status: "sugerido", // ÔøΩ AMARELO - Data diferente
    matchScore: 80,
    matchReason: "Data e valor semelhantes (¬±2%, ¬±3 dias)",
    confidenceLevel: "medium"
  },
  
  {
    bankTransaction: exemploTransacoesBancarias[3],
    systemTransaction: exemploLancamentosSistema[3],
    status: "sugerido", // üü° AMARELO - Descri√ß√£o similar
    matchScore: 75,
    matchReason: "Descri√ß√£o similar (78%)",
    confidenceLevel: "medium"
  },
  
  {
    bankTransaction: exemploTransacoesBancarias[4],
    systemTransaction: null,
    status: "sem_match", // ‚ö™ BRANCO
    matchScore: 0,
    matchReason: "Nenhuma correspond√™ncia encontrada", 
    confidenceLevel: "low"
  }
];

// Fun√ß√£o para testar se o sistema de sugest√µes est√° funcionando
function testarRegrasImplementadas() {
  console.log("üß™ TESTANDO SISTEMA DE SUGEST√ïES\n");
  
  resultadosEsperados.forEach((resultado, index) => {
    const emoji = {
      'conciliado': '‚úÖ',
      'sugerido': 'ÔøΩ', // Mudei para amarelo para destacar sugest√µes
      'transferencia': 'üîµ',
      'sem_match': '‚ö™'
    }[resultado.status];
    
    const cor = {
      'conciliado': 'VERDE',
      'sugerido': 'AMARELO', // Destacando que √© sugest√£o
      'transferencia': 'AZUL', 
      'sem_match': 'BRANCO'
    }[resultado.status];
    
    console.log(`${index + 1}. ${emoji} Card ${cor} - Status: ${resultado.status.toUpperCase()}`);
    console.log(`   Transa√ß√£o: ${resultado.bankTransaction.memo}`);
    console.log(`   Valor: R$ ${Math.abs(resultado.bankTransaction.amount).toFixed(2)}`);
    console.log(`   Score: ${resultado.matchScore}%`);
    console.log(`   Motivo: ${resultado.matchReason}`);
    console.log(`   Confian√ßa: ${resultado.confidenceLevel}`);
    
    if (resultado.systemTransaction) {
      console.log(`   ‚ÜîÔ∏è Sistema: ${resultado.systemTransaction.descricao}`);
    } else {
      console.log(`   ‚ùå Sem correspond√™ncia no sistema`);
    }
    console.log("");
  });
  
  console.log("üìä RESUMO DOS TESTES:");
  console.log(`‚úÖ Conciliados: ${resultadosEsperados.filter(r => r.status === 'conciliado').length}`);
  console.log(`ÔøΩ Sugeridos: ${resultadosEsperados.filter(r => r.status === 'sugerido').length}`);
  console.log(`üîµ Transfer√™ncias: ${resultadosEsperados.filter(r => r.status === 'transferencia').length}`);
  console.log(`‚ö™ Sem Match: ${resultadosEsperados.filter(r => r.status === 'sem_match').length}`);
  
  // Verificar se o sistema est√° gerando sugest√µes
  const sugestoes = resultadosEsperados.filter(r => r.status === 'sugerido').length;
  console.log(`\nüéØ FOCO: Sistema deveria gerar ${sugestoes} SUGEST√ïES`);
  console.log(`üìã Casos esperados:`);
  console.log(`   - Valor ligeiramente diferente (R$ 0,50)`);
  console.log(`   - Data com 2 dias de diferen√ßa`);
  console.log(`   - Descri√ß√£o similar mas n√£o id√™ntica`);
  
  console.log(`\nüí° PR√ìXIMO PASSO: Testar na interface real para verificar se as regras est√£o ativas!`);
}

// Cen√°rios de teste para valida√ß√£o de conta
const testeValidacaoOFX = {
  // ‚úÖ OFX v√°lido da conta correta
  ofxValido: {
    bankId: "341", // Ita√∫
    accountId: "12345",
    contaSelecionada: {
      banco: { codigo: "341", nome: "Ita√∫" },
      conta: "12345", 
      digito: "6"
    },
    resultado: "‚úÖ APROVADO - Conta corresponde"
  },
  
  // ‚ùå OFX de banco incorreto  
  ofxBancoIncorreto: {
    bankId: "237", // Bradesco
    accountId: "12345",
    contaSelecionada: {
      banco: { codigo: "341", nome: "Ita√∫" },
      conta: "12345",
      digito: "6" 
    },
    resultado: "‚ùå REJEITADO - Banco incorreto"
  },
  
  // ‚ùå OFX de conta incorreta
  ofxContaIncorreta: {
    bankId: "341", // Ita√∫ correto
    accountId: "99999", // Conta errada
    contaSelecionada: {
      banco: { codigo: "341", nome: "Ita√∫" },
      conta: "12345",
      digito: "6"
    },
    resultado: "‚ùå REJEITADO - Conta incorreta"
  }
};

console.log("üéØ SISTEMA DE CONCILIA√á√ÉO BANC√ÅRIA - MELHORIAS IMPLEMENTADAS");
console.log("=".repeat(70));

// Executar testes se arquivo for executado diretamente
if (typeof require !== 'undefined' && require.main === module) {
  testarRegrasImplementadas();
}

module.exports = {
  exemploTransacoesBancarias,
  exemploLancamentosSistema, 
  resultadosEsperados,
  testeValidacaoOFX,
  testarRegrasImplementadas
};

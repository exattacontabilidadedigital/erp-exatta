/**
 * Teste do Filtro com Valor Exato + Intervalo de Data
 * Verifica a nova configura√ß√£o:
 * - Valor: EXATO da transa√ß√£o OFX (sem toler√¢ncia)
 * - Data: ¬±3 dias para mais e para menos
 */

// Simula√ß√£o dos dados da transa√ß√£o OFX
const transacaoOFX = {
  amount: "25.00",
  posted_at: "2024-12-20"
};

console.log('üß™ TESTE: Filtro com Valor Exato + Intervalo de Data');
console.log('=' .repeat(60));

// Teste 1: Valor EXATO (sem toler√¢ncia)
const valorTransacao = Math.abs(parseFloat(transacaoOFX.amount));

console.log('üí∞ VALOR EXATO (0% toler√¢ncia):');
console.log(`   Valor da transa√ß√£o OFX: R$ ${valorTransacao.toFixed(2)}`);
console.log(`   Valor m√≠nimo aceito: R$ ${valorTransacao.toFixed(2)}`);
console.log(`   Valor m√°ximo aceito: R$ ${valorTransacao.toFixed(2)}`);
console.log(`   Toler√¢ncia: 0% (valor exato)`);
console.log(`   ‚úÖ Aceita APENAS: R$ ${valorTransacao.toFixed(2)}`);

// Teste 2: Intervalo de data (¬±3 dias)
const dataTransacao = new Date(transacaoOFX.posted_at);
const dataInicio = new Date(dataTransacao);
const dataFim = new Date(dataTransacao);

const toleranciaDias = 3;
dataInicio.setDate(dataTransacao.getDate() - toleranciaDias);
dataFim.setDate(dataTransacao.getDate() + toleranciaDias);

console.log('\nüìÖ INTERVALO DE DATA (¬±3 dias):');
console.log(`   Data da transa√ß√£o OFX: ${dataTransacao.toISOString().split('T')[0]}`);
console.log(`   Data in√≠cio da busca: ${dataInicio.toISOString().split('T')[0]}`);
console.log(`   Data fim da busca: ${dataFim.toISOString().split('T')[0]}`);
console.log(`   Per√≠odo de busca: ${toleranciaDias * 2 + 1} dias`);

// Teste 3: Simula√ß√£o de lan√ßamentos que seriam encontrados
const lancamentosTeste = [
  { valor: 24.50, data: '2024-12-20', match: false }, // Valor diferente
  { valor: 25.00, data: '2024-12-16', match: false }, // Data fora do intervalo
  { valor: 25.00, data: '2024-12-17', match: true },  // ‚úÖ Match perfeito
  { valor: 25.00, data: '2024-12-20', match: true },  // ‚úÖ Match perfeito
  { valor: 25.00, data: '2024-12-23', match: true },  // ‚úÖ Match perfeito
  { valor: 25.00, data: '2024-12-24', match: false }, // Data fora do intervalo
  { valor: 25.50, data: '2024-12-20', match: false }, // Valor diferente
];

const matchesEncontrados = lancamentosTeste.filter(l => {
  const valorMatch = parseFloat(l.valor.toString()) === valorTransacao;
  const dataLanc = new Date(l.data);
  const dataMatch = dataLanc >= dataInicio && dataLanc <= dataFim;
  l.match = valorMatch && dataMatch;
  return l.match;
});

console.log('\nüéØ SIMULA√á√ÉO DE MATCHES:');
console.log('   Lan√ßamentos de teste:');
lancamentosTeste.forEach((l, i) => {
  const status = l.match ? '‚úÖ' : '‚ùå';
  const motivo = l.match ? 'MATCH' : 
    (parseFloat(l.valor.toString()) !== valorTransacao ? 'valor diferente' : 'data fora do intervalo');
  console.log(`   ${i + 1}. ${status} R$ ${l.valor.toFixed(2)} em ${l.data} (${motivo})`);
});

console.log(`\n   Total de matches encontrados: ${matchesEncontrados.length} de ${lancamentosTeste.length}`);

// Teste 4: Sistema de Fallback
console.log('\nüîÑ SISTEMA DE FALLBACK:');
console.log('   FILTRO PRINCIPAL: Valor exato + ¬±3 dias');
console.log('   ‚Üì');
console.log('   FALLBACK 1: ¬±5% valor + ¬±3 dias');
console.log('   ‚Üì');
console.log('   FALLBACK 2: ¬±10% valor + ¬±7 dias');

// Simula√ß√£o dos fallbacks
const fallback1Tolerancia = 0.05; // 5%
const fallback1Min = valorTransacao * (1 - fallback1Tolerancia);
const fallback1Max = valorTransacao * (1 + fallback1Tolerancia);

const fallback2Tolerancia = 0.10; // 10%
const fallback2Min = valorTransacao * (1 - fallback2Tolerancia);
const fallback2Max = valorTransacao * (1 + fallback2Tolerancia);

console.log('\nüìä TOLER√ÇNCIAS DE FALLBACK:');
console.log(`   Fallback 1 (¬±5%): R$ ${fallback1Min.toFixed(2)} - R$ ${fallback1Max.toFixed(2)}`);
console.log(`   Fallback 2 (¬±10%): R$ ${fallback2Min.toFixed(2)} - R$ ${fallback2Max.toFixed(2)}`);

// Teste 5: Par√¢metros para API
const params = new URLSearchParams();
params.append('valorMin', valorTransacao.toFixed(2));
params.append('valorMax', valorTransacao.toFixed(2));
params.append('buscarValorAbsoluto', 'true');
params.append('status', 'pendente');
params.append('dataInicio', dataInicio.toISOString().split('T')[0]);
params.append('dataFim', dataFim.toISOString().split('T')[0]);

console.log('\nüåê PAR√ÇMETROS PARA API:');
for (const [key, value] of params.entries()) {
  console.log(`   ${key}: ${value}`);
}

console.log('\n‚úÖ VANTAGENS DO VALOR EXATO:');
console.log('   ‚Ä¢ Precis√£o m√°xima: encontra apenas lan√ßamentos com valor id√™ntico');
console.log('   ‚Ä¢ Reduz drasticamente falsos positivos');
console.log('   ‚Ä¢ Ideal para concilia√ß√£o banc√°ria autom√°tica');
console.log('   ‚Ä¢ Sistema de fallback garante flexibilidade quando necess√°rio');

console.log('\nüéØ CASOS DE USO IDEAIS:');
console.log('   ‚Ä¢ Transfer√™ncias banc√°rias (valores exatos)');
console.log('   ‚Ä¢ Pagamentos de boletos (valores precisos)');
console.log('   ‚Ä¢ Dep√≥sitos e saques (valores espec√≠ficos)');
console.log('   ‚Ä¢ D√©bitos autom√°ticos (valores padronizados)');

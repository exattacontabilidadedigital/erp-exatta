const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://hjgrirpojhbzegdjukfm.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImhqZ3JpcnBvamhiemVnZGp1a2ZtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzA1NjI5ODUsImV4cCI6MjA0NjEzODk4NX0.Lzjcp-BFJxKLTLTgdG1NCgfQs1-G5d4t9DpXGwJIj_M';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function debugPreLancamentos() {
  console.log('üîç Debug completo de pr√©-lan√ßamentos...');
  
  try {
    // 1. Verificar se existem pr√©-lan√ßamentos
    console.log('\n1. Verificando todos os pr√©-lan√ßamentos...');
    const { data: allEntries, error: allError } = await supabase
      .from('pre_lancamentos')
      .select('*')
      .limit(10);

    if (allError) {
      console.error('‚ùå Erro ao buscar pr√©-lan√ßamentos:', allError);
      return;
    }

    console.log('üìä Total de pr√©-lan√ßamentos:', allEntries?.length || 0);
    if (allEntries && allEntries.length > 0) {
      console.log('üìã Primeiro pr√©-lan√ßamento:');
      console.log(JSON.stringify(allEntries[0], null, 2));
      
      // Verificar lote_ids √∫nicos
      const loteIds = [...new Set(allEntries.map(e => e.lote_id))];
      console.log('üìã Lotes √∫nicos nos pr√©-lan√ßamentos:', loteIds);
    }

    // 2. Verificar lotes_importacao
    console.log('\n2. Verificando lotes de importa√ß√£o...');
    const { data: allLotes, error: lotesError } = await supabase
      .from('lotes_importacao')
      .select('*')
      .limit(10);

    if (lotesError) {
      console.error('‚ùå Erro ao buscar lotes:', lotesError);
      return;
    }

    console.log('üìä Total de lotes:', allLotes?.length || 0);
    if (allLotes && allLotes.length > 0) {
      console.log('üìã Primeiro lote:');
      console.log(JSON.stringify(allLotes[0], null, 2));
      
      // Verificar usu√°rios √∫nicos
      const usuarios = [...new Set(allLotes.map(l => l.usuario_upload))];
      console.log('üìã Usu√°rios √∫nicos nos lotes:', usuarios);
    }

    // 3. Verificar rela√ß√£o entre lotes e pr√©-lan√ßamentos
    if (allEntries && allLotes && allEntries.length > 0 && allLotes.length > 0) {
      console.log('\n3. Verificando relacionamento...');
      
      const loteIdFromPreLancamento = allEntries[0].lote_id;
      const loteEncontrado = allLotes.find(l => l.id === loteIdFromPreLancamento);
      
      console.log('üîó Lote ID do primeiro pr√©-lan√ßamento:', loteIdFromPreLancamento);
      console.log('üîó Lote encontrado:', loteEncontrado ? 'SIM' : 'N√ÉO');
      
      if (loteEncontrado) {
        console.log('üë§ Usu√°rio do lote:', loteEncontrado.usuario_upload);
      }
    }

    // 4. Simular busca como no frontend
    console.log('\n4. Simulando busca do frontend...');
    const usuarioTeste = 'ecf8085f-bbcc-4bfc-b691-1dd83872433e'; // ID do usu√°rio dos dados

    const { data: userBatches, error: batchError } = await supabase
      .from('lotes_importacao')
      .select('id, nome_arquivo, data_upload, usuario_upload')
      .eq('usuario_upload', usuarioTeste);

    if (batchError) {
      console.error('‚ùå Erro ao buscar lotes do usu√°rio:', batchError);
      return;
    }

    console.log('üìã Lotes do usu√°rio', usuarioTeste, ':', userBatches?.length || 0);
    if (userBatches && userBatches.length > 0) {
      console.log('üìã Lotes encontrados:', userBatches);
      
      const batchIds = userBatches.map(batch => batch.id);
      
      // Buscar pr√©-lan√ßamentos desses lotes
      const { data: userEntries, error: entriesError } = await supabase
        .from('pre_lancamentos')
        .select('*')
        .in('lote_id', batchIds);

      if (entriesError) {
        console.error('‚ùå Erro ao buscar pr√©-lan√ßamentos do usu√°rio:', entriesError);
      } else {
        console.log('‚úÖ Pr√©-lan√ßamentos do usu√°rio:', userEntries?.length || 0);
        if (userEntries && userEntries.length > 0) {
          console.log('üìä Status dos pr√©-lan√ßamentos:');
          const statusCount = {};
          userEntries.forEach(e => {
            statusCount[e.status_aprovacao] = (statusCount[e.status_aprovacao] || 0) + 1;
          });
          console.log(statusCount);
        }
      }
    } else {
      console.log('‚ö†Ô∏è Nenhum lote encontrado para o usu√°rio');
    }

  } catch (err) {
    console.error('‚ùå Erro geral:', err);
  }
}

debugPreLancamentos();
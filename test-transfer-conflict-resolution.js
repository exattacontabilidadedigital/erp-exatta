/**
 * Teste da Resolu√ß√£o Autom√°tica de Conflitos de Transfer√™ncia
 * 
 * Este script testa a nova l√≥gica de resolu√ß√£o autom√°tica de conflitos
 * quando o bot√£o "Conciliar" √© clicado em transfer√™ncias.
 */

const testTransferConflictResolution = async () => {
  console.log('üß™ INICIANDO TESTE DE RESOLU√á√ÉO DE CONFLITOS DE TRANSFER√äNCIA');
  console.log('=' .repeat(60));

  // Simular dados de uma transfer√™ncia conflitante
  const mockTransferPair = {
    id: 'test-pair-001',
    status: 'suggested',
    bankTransaction: {
      id: 'bank-tx-001',
      fit_id: 'FIT123456',
      memo: 'TRANSFERENCIA PIX PARA CONTA CORRENTE',
      amount: -5000.00,
      status_conciliacao: 'pendente',
      data_transacao: '2024-08-15'
    },
    systemTransaction: {
      id: 'sys-tx-001',
      descricao: 'Transfer√™ncia PIX - Conta Corrente',
      valor: 5000.00,
      data: '2024-08-15',
      tipo: 'transferencia'
    }
  };

  console.log('üìä Dados da transfer√™ncia a ser testada:');
  console.log('Bank Transaction:', {
    id: mockTransferPair.bankTransaction.id,
    memo: mockTransferPair.bankTransaction.memo,
    amount: mockTransferPair.bankTransaction.amount,
    status: mockTransferPair.bankTransaction.status_conciliacao
  });
  console.log('System Transaction:', {
    id: mockTransferPair.systemTransaction.id,
    descricao: mockTransferPair.systemTransaction.descricao,
    valor: mockTransferPair.systemTransaction.valor
  });

  // Simular fun√ß√£o handleConfirmTransfer com a nova l√≥gica
  const simulateHandleConfirmTransfer = async (pair) => {
    console.log('\nüöÄ Simulando handleConfirmTransfer com nova l√≥gica...');
    
    if (!pair.bankTransaction || !pair.systemTransaction) {
      console.error('‚ùå Dados insuficientes');
      return false;
    }

    // ‚úÖ VERIFICA√á√ÉO PR√âVIA: Limpar conflitos antes de tentar conciliar
    console.log('üîç Verificando conflitos pr√©-existentes...');
    try {
      console.log('üßπ Limpeza pr√©via para o lan√ßamento:', pair.systemTransaction.id);
      
      // Simular API de limpeza pr√©via
      const cleanupResponse = await simulateAPICall('/api/reconciliation/unlink-system', {
        system_transaction_id: pair.systemTransaction.id
      });
      
      if (cleanupResponse.success) {
        console.log('‚úÖ Limpeza pr√©via conclu√≠da');
        // Aguardar um momento
        await new Promise(resolve => setTimeout(resolve, 500));
      } else {
        console.warn('‚ö†Ô∏è API de limpeza pr√©via n√£o dispon√≠vel ou sem conflitos');
      }
    } catch (cleanupError) {
      console.warn('‚ö†Ô∏è Erro na limpeza pr√©via, continuando:', cleanupError.message);
    }

    console.log('‚úÖ Tentando concilia√ß√£o inicial...');

    try {
      // Simular primeira tentativa de concilia√ß√£o
      const response = await simulateAPICall('/api/reconciliation/conciliate', {
        bank_transaction_id: pair.bankTransaction.id,
        system_transaction_id: pair.systemTransaction.id,
        confidence_level: 'high',
        rule_applied: 'transfer_confirmation'
      });

      console.log('üì° Resposta da API:', response);

      if (!response.success) {
        // ‚úÖ TRATAMENTO PARA ERRO 409 (Conflito de Concilia√ß√£o)
        if (response.status === 409) {
          console.warn('‚ö†Ô∏è Erro 409: Detectado conflito persistente');
          console.log('üìä Detalhes do conflito:', response.errorData);
          
          // ‚úÖ ESTRAT√âGIA MELHORADA: Limpeza agressiva de conflitos
          console.log('üîì Executando limpeza agressiva de conflitos...');
          
          try {
            // 1. Desconciliar pela transa√ß√£o banc√°ria
            console.log('üîß Tentativa 1: Desconciliar por bank_transaction_id:', pair.bankTransaction.id);
            const unlinkBank = await simulateAPICall('/api/reconciliation/unlink', {
              bank_transaction_id: pair.bankTransaction.id
            });
            
            if (unlinkBank.success) {
              console.log('‚úÖ Desconcilia√ß√£o por bank_transaction_id bem-sucedida');
            }
            
            // 2. Desconciliar pelo lan√ßamento do sistema
            console.log('üîß Tentativa 2: Desconciliar por system_transaction_id:', pair.systemTransaction.id);
            const unlinkSystem = await simulateAPICall('/api/reconciliation/unlink-system', {
              system_transaction_id: pair.systemTransaction.id
            });
            
            if (unlinkSystem.success) {
              console.log('‚úÖ Desconcilia√ß√£o por system_transaction_id bem-sucedida');
            }
            
            // 3. Se a API retornou conflitos espec√≠ficos, desconciliar cada um
            if (response.errorData?.existing_matches?.length > 0) {
              console.log('üîß Tentativa 3: Desconciliar matches espec√≠ficos:', response.errorData.existing_matches);
              
              for (const match of response.errorData.existing_matches) {
                if (match.bank_transaction_id) {
                  try {
                    const unlinkSpecific = await simulateAPICall('/api/reconciliation/unlink', {
                      bank_transaction_id: match.bank_transaction_id
                    });
                    
                    if (unlinkSpecific.success) {
                      console.log('‚úÖ Match espec√≠fico desconciliado:', match.bank_transaction_id);
                    }
                  } catch (unlinkError) {
                    console.warn('‚ö†Ô∏è Erro ao desconciliar match espec√≠fico:', unlinkError.message);
                  }
                }
              }
            }
            
            // 4. Aguardar um momento para as opera√ß√µes se completarem
            console.log('‚è≥ Aguardando limpeza se completar...');
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            // 5. Tentar concilia√ß√£o novamente
            console.log('üîÑ Tentando concilia√ß√£o ap√≥s limpeza agressiva...');
            const retryResponse = await simulateAPICall('/api/reconciliation/conciliate', {
              bank_transaction_id: pair.bankTransaction.id,
              system_transaction_id: pair.systemTransaction.id,
              confidence_level: 'high',
              rule_applied: 'transfer_confirmation_post_cleanup'
            });
            
            if (retryResponse.success) {
              console.log('‚úÖ Transfer√™ncia conciliada ap√≥s limpeza agressiva:', retryResponse.data);
              return true;
            } else {
              const conflictInfo = response.errorData?.existing_matches?.length > 0 
                ? `Conflitos: ${response.errorData.existing_matches.map(m => m.bank_transaction_id || 'ID n√£o identificado').join(', ')}`
                : 'Conflitos n√£o identificados';
                
              console.error(`‚ùå Conflito persistente. ${conflictInfo}. Verifique a tabela transaction_matches.`);
              return false;
            }
            
          } catch (aggressiveCleanupError) {
            console.error('‚ùå Erro na limpeza agressiva:', aggressiveCleanupError.message);
            return false;
          }
        } else {
          console.error('‚ùå Erro na API:', response.error);
          return false;
        }
      } else {
        console.log('‚úÖ Transfer√™ncia conciliada com sucesso na primeira tentativa:', response.data);
        return true;
      }
      
    } catch (error) {
      console.error('üí• ERRO capturado:', error.message);
      return false;
    }
  };

  // Simular chamadas de API
  const simulateAPICall = async (endpoint, payload) => {
    console.log(`üåê Simulando chamada para ${endpoint}:`, payload);
    
    // Simular diferentes cen√°rios
    if (endpoint === '/api/reconciliation/conciliate' && payload.rule_applied === 'transfer_confirmation') {
      // Primeira tentativa - simular conflito 409
      return {
        success: false,
        status: 409,
        error: 'Conflict: Transaction already reconciled',
        errorData: {
          existing_matches: [
            {
              bank_transaction_id: 'bank-tx-conflict-001',
              system_transaction_id: mockTransferPair.systemTransaction.id,
              status: 'confirmed'
            }
          ]
        }
      };
    }

    if (endpoint === '/api/reconciliation/unlink' || endpoint === '/api/reconciliation/unlink-system') {
      // Simular sucesso na desconcilia√ß√£o
      return {
        success: true,
        data: { message: 'Successfully unlinked' }
      };
    }

    if (endpoint === '/api/reconciliation/conciliate' && payload.rule_applied === 'transfer_confirmation_post_cleanup') {
      // Segunda tentativa ap√≥s limpeza - simular sucesso
      return {
        success: true,
        data: {
          match_id: 'new-match-001',
          bank_transaction_id: payload.bank_transaction_id,
          system_transaction_id: payload.system_transaction_id,
          status: 'confirmed'
        }
      };
    }

    // Padr√£o - sucesso
    return {
      success: true,
      data: { message: 'Operation successful' }
    };
  };

  // Executar o teste
  console.log('\nüéØ EXECUTANDO TESTE...');
  const result = await simulateHandleConfirmTransfer(mockTransferPair);
  
  console.log('\nüìã RESULTADO DO TESTE:');
  console.log('=' .repeat(60));
  if (result) {
    console.log('‚úÖ SUCESSO: A resolu√ß√£o autom√°tica de conflitos funcionou!');
    console.log('   ‚Ä¢ Conflito 409 foi detectado');
    console.log('   ‚Ä¢ Limpeza agressiva foi executada');
    console.log('   ‚Ä¢ Concilia√ß√£o foi bem-sucedida na segunda tentativa');
  } else {
    console.log('‚ùå FALHA: A resolu√ß√£o autom√°tica de conflitos n√£o funcionou');
    console.log('   ‚Ä¢ Verifique os logs acima para identificar o problema');
  }

  console.log('\nüéâ TESTE CONCLU√çDO!');
  console.log('=' .repeat(60));
};

// Executar o teste
testTransferConflictResolution().catch(console.error);

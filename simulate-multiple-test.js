// Script para simular m√∫ltiplos lan√ßamentos via API da aplica√ß√£o

async function criarCenarioViaAPI() {
  try {
    console.log('üîß Criando cen√°rio de m√∫ltiplos lan√ßamentos via API...');

    // Primeiro, vamos verificar a estrutura da API de concilia√ß√£o
    console.log('\nüîç Verificando API de concilia√ß√£o...');
    
    const listResponse = await fetch('http://localhost:3000/api/conciliation/list');
    const listData = await listResponse.json();
    
    console.log('Total transa√ß√µes banc√°rias:', listData.bankTransactions?.length || 0);
    console.log('Total lan√ßamentos:', listData.systemTransactions?.length || 0);

    // Encontrar uma transa√ß√£o banc√°ria sem match
    const transacaoSemMatch = listData.bankTransactions?.find(bt => 
      bt.reconciliation_status === 'sem_match'
    );

    if (!transacaoSemMatch) {
      console.log('‚ùå Nenhuma transa√ß√£o banc√°ria sem match encontrada');
      return;
    }

    console.log('\nüí∞ Transa√ß√£o banc√°ria selecionada:');
    console.log('- ID:', transacaoSemMatch.id);
    console.log('- Valor:', transacaoSemMatch.valor || transacaoSemMatch.amount);
    console.log('- Descri√ß√£o:', transacaoSemMatch.descricao || transacaoSemMatch.memo);

    // Encontrar lan√ßamentos sem match que possam somar o valor da transa√ß√£o banc√°ria
    const valorBanco = Math.abs(transacaoSemMatch.valor || transacaoSemMatch.amount);
    const lancamentosSemMatch = listData.systemTransactions?.filter(st => 
      !st.status_conciliacao || st.status_conciliacao === 'pendente'
    ) || [];

    console.log('\nüìã Lan√ßamentos dispon√≠veis:', lancamentosSemMatch.length);

    // Vamos tentar usar dois lan√ßamentos que somem pr√≥ximo ao valor da transa√ß√£o banc√°ria
    let lancamentosSelecionados = [];
    let somaAtual = 0;
    
    for (const lancamento of lancamentosSemMatch) {
      if (lancamentosSelecionados.length < 2) {
        lancamentosSelecionados.push(lancamento);
        somaAtual += Math.abs(lancamento.valor);
      }
    }

    if (lancamentosSelecionados.length >= 2) {
      console.log('\nüéØ Simulando m√∫ltiplos lan√ßamentos:');
      console.log('Valor no banco:', valorBanco);
      console.log('Lan√ßamentos selecionados:');
      
      lancamentosSelecionados.forEach((lancamento, index) => {
        console.log(`  ${index + 1}. ID: ${lancamento.id}, Valor: R$ ${lancamento.valor}, Descri√ß√£o: ${lancamento.descricao}`);
      });
      
      console.log('Soma dos lan√ßamentos:', somaAtual);
      console.log('Diferen√ßa:', Math.abs(valorBanco - somaAtual));

      // Para simular m√∫ltiplos matches, vou criar um objeto de teste que imite a estrutura
      console.log('\nüß™ Simulando dados para teste da interface:');
      
      const dadosSimulados = {
        bankTransaction: {
          id: transacaoSemMatch.id,
          valor: valorBanco,
          descricao: transacaoSemMatch.descricao || transacaoSemMatch.memo,
          reconciliation_status: 'sugerido'
        },
        systemTransactions: lancamentosSelecionados.map(l => ({
          id: l.id,
          valor: l.valor,
          descricao: l.descricao
        })),
        systemTransaction: {
          id: 'multiple',
          valor: somaAtual,
          descricao: `${lancamentosSelecionados.length} lan√ßamentos selecionados`
        }
      };

      console.log('\nüìä Estrutura simulada:');
      console.log(JSON.stringify(dadosSimulados, null, 2));

      console.log('\n‚ú® Para testar o fix:');
      console.log('1. Acesse http://localhost:3000');
      console.log('2. Procure por cards que mostram m√∫ltiplos lan√ßamentos');
      console.log('3. Verifique se o valor exibido √© a soma dos lan√ßamentos, n√£o o valor individual');
      console.log('4. Observe os logs no console do navegador com "üí∞ M√öLTIPLOS LAN√áAMENTOS"');

    } else {
      console.log('‚ùå N√£o h√° lan√ßamentos suficientes para criar o cen√°rio de teste');
    }

  } catch (error) {
    console.error('Erro durante simula√ß√£o:', error);
  }
}

// Executar simula√ß√£o
criarCenarioViaAPI();
